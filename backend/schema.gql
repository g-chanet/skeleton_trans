# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type GameStat {
  id: String!
  user: User!
  opponentId: String!
  isWinner: Boolean!
  userScore: String!
  opponentScore: String!
  createdAt: String!
}

type UserPublic {
  id: String!
  username: String!
  avatarUrl: String
}

type User {
  id: String!
  username: String!
  avatarUrl: String
  doubleAuth: Boolean!
  isOauth: Boolean!
}

type UserTwoFaSettings {
  googleAuthenticatorQrCode: String!
}

type DailyGameRatios {
  date: DateTime!
  wins: Float!
  losses: Float!
  ratio: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GeneralUserGameStats {
  gamesCount: Float!
  allTimeRatio: Float!
  MeanPoints: Float!
}

type UserPresence {
  id: String!
  userId: String!
  connectedAt: DateTime!
  disconnectedAt: DateTime!
}

type GameMatchmakingMember {
  userId: String!
}

type GameMember {
  gameId: String!
  userId: String!
}

type GameData {
  id: String!
  gameMembers: [GameMember!]!
}

type ChannelMessage {
  id: ID!
  message: String!
  channelId: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Channel {
  id: ID!
  name: String!
  avatarUrl: String
  channelType: EChannelType!
  createdAt: DateTime!
  channelMembers: [ChannelMember!]
  channelMessages: [ChannelMessage!]
}

enum EChannelType {
  Public
  Protected
  Private
}

type ChannelMember {
  channelId: ID!
  userId: String!
  type: EChannelMemberType!
  muted: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  channel: Channel
  user: UserPublic
}

enum EChannelMemberType {
  Default
  Admin
  Owner
  Banned
  Invited
}

type UserRelation {
  id: ID!
  userOwnerId: String!
  userTargetId: String!
  type: EUserRealtionType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum EUserRealtionType {
  WaitingAccept
  PendingAccept
  Friend
  Blocked
  Terminated
}

type Query {
  findMyUser: User!
  findUser(args: FindUserInput!): UserPublic!
  findLeaderboardUserList: [UserPublic!]!
  findPublicUsersList: [UserPublic!]!
  findUserTwoFaSettings: UserTwoFaSettings!
  findDailyGameRatios: [DailyGameRatios!]!
  findPublicDailyGameRatios(userid: String!): [DailyGameRatios!]!
  findGeneralGameStatsForUser: GeneralUserGameStats!
  findPublicGeneralGameStatsForUser(userid: String!): GeneralUserGameStats!
  findAllGameStatsForUser: [GameStat!]!
  findAllPublicGameStatsForUser(userid: String!): [GameStat!]!
  checkPseudo(args: CheckPseudoInput!): Boolean!
  findUserPresences(args: FindUserPresencesInput!): [UserPresence!]!
  findAllRelationsForMyUser: [UserRelation!]!
  findChannel(args: FindChannelInput!): Channel!
  findAllChannels: [Channel!]!
  findAllPublicChannels: [Channel!]!
  findAllProtectedChannels: [Channel!]!
  findAllChannelsForUser: [Channel!]!
  checkChannelName(args: CheckChannelInput!): Boolean!
  findMyChannelMemberForChannel(args: FindMyChannelMemberForChannelInput!): ChannelMember!
  findAllChannelMembersForChannel(args: FindAllChannelMembersForChannelInput!): [ChannelMember!]!
  findAllChannelMessagesForChannel(args: FindAllMessagesForChannelInput!): [ChannelMessage!]!
  findUserForChannelMessage(args: FindUserForChannelMessageInput!): UserPublic!
  findAllGameMatchmakingMemberl: [GameMatchmakingMember!]!
}

input FindUserInput {
  id: String!
}

input CheckPseudoInput {
  pseudo: String!
}

input FindUserPresencesInput {
  userIds: [String!]!
}

input FindChannelInput {
  id: String!
}

input CheckChannelInput {
  channelName: String!
}

input FindMyChannelMemberForChannelInput {
  channelId: String!
}

input FindAllChannelMembersForChannelInput {
  channelId: String!
}

input FindAllMessagesForChannelInput {
  channelId: String!
}

input FindUserForChannelMessageInput {
  id: String!
}

type Mutation {
  updateMyUser(args: UpdateMyUserInput!): User!
  deleteMyUser: Boolean!
  updateMyPassword(args: UpdateMyPasswordInput!): Boolean!
  commentAdded(newComment: String!): Boolean!
  createRequestFriend(args: CreateRequestFriendInput!): UserRelation!
  acceptFriendRequest(args: UpdateUserRelationInput!): UserRelation!
  refuseFriendRequest(args: UpdateUserRelationInput!): UserRelation!
  blockRelation(args: UpdateUserRelationInput!): UserRelation!
  removeFriend(args: UpdateUserRelationInput!): UserRelation!
  createChannel(args: CreateChannelInput!): Channel!
  updateChannel(args: UpdateChannelInput!): Channel!
  deleteChannel(args: DeleteChannelInput!): Channel!
  createMemberForChannel(args: CreateMemberForChannelInput!): ChannelMember!
  updateMemberForChannel(args: UpdateMyMemberForChannelInput!): ChannelMember!
  deleteMemberForChannel(args: DeleteMemberForChannelInput!): ChannelMember!
  deleteMyMemberForChannel(args: DeleteMyMemberForChannelInput!): ChannelMember!
  createMessageForChannel(args: CreateMessageForChannelInput!): ChannelMessage!
  updateMyMessageForChannel(args: UpdateMyMessageForChannelInput!): ChannelMessage!
  deleteMyMessageForChannel(args: DeleteMyMessageForChannelInput!): ChannelMessage!
  updateGameMemberForGame(args: UpdateGameMemberInput!): GameMember!
  joinGameMatchmakingMember: GameMatchmakingMember!
  leaveGameMatchmakingMember: GameMatchmakingMember!
  signInLocal(args: SignInLocalInput!): User!
  signUpLocal(args: SignUpLocalInput!): User!
  isGoogleAuthCodeValid(args: GoogleAuthCodeValidatorInput!): Boolean!
  signInGoogle: Boolean!
  signInGithub: Boolean!
  signIn42: Boolean!
  signInDiscord: Boolean!
  logout: Boolean!
  createGame(args: CreateGameInput!): GameData!
  updateGame(args: UpdateGameInput!): GameData!
  joinGame(args: JoinGameInput!): GameData!
  leaveGame(args: LeaveGameInput!): Boolean!
  injectFalseGameStatData: Boolean!
  removeFalseGameStatData: Boolean!
  createGameStat(args: createGameStatInput!): GameStat!
}

input UpdateMyUserInput {
  doubleAuth: Boolean
  username: String
  avatarUrl: String
}

input UpdateMyPasswordInput {
  oldPassword: String!
  newPassword: String!
}

input CreateRequestFriendInput {
  userTargetId: String!
}

input UpdateUserRelationInput {
  userTargetid: String!
}

input CreateChannelInput {
  name: String!
  avatarUrl: String
  password: String
  channelType: EChannelType!
}

input UpdateChannelInput {
  id: String!
  name: String
  avatarUrl: String
  channelType: EChannelType
  password: String
}

input DeleteChannelInput {
  id: String!
}

input CreateMemberForChannelInput {
  channelId: String!
  channelPassword: String
  type: EChannelMemberType
}

input UpdateMyMemberForChannelInput {
  channelId: String!
  userId: String!
  mute: DateTime
  type: EChannelMemberType
}

input DeleteMemberForChannelInput {
  channelId: String!
  userId: String!
}

input DeleteMyMemberForChannelInput {
  channelId: String!
}

input CreateMessageForChannelInput {
  message: String!
  channelId: String!
}

input UpdateMyMessageForChannelInput {
  id: String!
  channelId: String!
  message: String!
}

input DeleteMyMessageForChannelInput {
  id: String!
}

input UpdateGameMemberInput {
  gameId: String!
}

input SignInLocalInput {
  password: String!
  email: String!
  doubleAuthCode: String!
}

input SignUpLocalInput {
  password: String!
  email: String!
  username: String!
}

input GoogleAuthCodeValidatorInput {
  code: String!
}

input CreateGameInput {
  userIds: [String!]!
}

input UpdateGameInput {
  id: String!
}

input JoinGameInput {
  id: String!
}

input LeaveGameInput {
  id: String!
}

input createGameStatInput {
  opponentId: String!
  userScore: String!
  opponentScore: String!
  isFakeData: Boolean!
}

type Subscription {
  usersPresenceUpdated(args: FindUserPresencesInput!): UserPresence!
  userRelationsChanged(userId: String!): UserRelation!
  onCreateChannel: Channel!
  onUpdateChannel(args: OnChannelInput!): Channel!
  onDeleteChannel(args: OnChannelInput!): Channel!
  onNewChannelMemberForChannelId(args: OnChannelMemberChannelInput!): ChannelMember!
  onUpdateChannelMemberForChannelId(args: OnChannelMemberChannelInput!): ChannelMember!
  onDeleteChannelMemberForChannelId(args: OnChannelMemberChannelInput!): ChannelMember!
  onNewChannelMessageForChannelId(args: OnNewChannelMessageForChannelIdInput!): ChannelMessage!
  onDeleteChannelMessageForChannel(args: OnDeleteChannelMessageForChannel!): ChannelMessage!
}

input OnChannelInput {
  id: String!
}

input OnChannelMemberChannelInput {
  channelId: String!
}

input OnNewChannelMessageForChannelIdInput {
  channelId: String!
}

input OnDeleteChannelMessageForChannel {
  channelId: String!
}