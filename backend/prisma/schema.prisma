// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//**************************************************//
//  USER
//**************************************************//

model User {
  id         String  @id @default(nanoid())
  doubleAuth Boolean @default(false)
  avatarUrl  String?

  password                  String?
  email                     String  @unique
  username                  String  @unique
  twoFactorAuthSecret       String?
  googleAuthenticatorQrCode String?

  providerName String?
  providerId   String?
  isOauth      Boolean?

  presenceStatus EUserPresenceStatus @default(Default)
  language       EUserLanguage       @default(Default)

  userPresences UserPresence[]

  relationFollowers  UserRelation[] @relation("relationFollowers")
  relationFollowings UserRelation[] @relation("relationFollowings")

  channelMembers  ChannelMember[]
  channelMessages ChannelMessage[]

  gameStats             GameStat[]
  gameMember            GameMember?
  gameMatchmakingMember GameMatchmakingMember?
}

model UserPresence {
  id             String    @id @default(nanoid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  connectedAt    DateTime  @default(now())
  disconnectedAt DateTime?
}

model UserRelation {
  userOwner   User   @relation("relationFollowers", fields: [userOwnerId], references: [id], onDelete: Cascade)
  userOwnerId String

  userTarget   User   @relation("relationFollowings", fields: [userTargetId], references: [id], onDelete: Cascade)
  userTargetId String

  type EUserRelationType

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@id([userOwnerId, userTargetId])
}

//**************************************************//
//  CHANNEL
//**************************************************//

model Channel {
  id              String           @id @default(nanoid())
  name            String
  avatarUrl       String?
  password        String?
  channelType     EChannelType
  channelMembers  ChannelMember[]
  channelMessages ChannelMessage[]
  createdAt       DateTime         @default(now())
}

model ChannelMember {
  channel         Channel            @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId       String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  type            EChannelMemberType @default(Default)
  muted           DateTime           @default(now())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  channelMessages ChannelMessage[]

  @@id([channelId, userId])
}

model ChannelMessage {
  id            String        @default(nanoid())
  message       String
  channel       Channel       @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  channelMember ChannelMember @relation(fields: [channelId, userId], references: [channelId, userId], onDelete: Cascade)
  channelId     String
  userId        String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@id([id, userId])
}

//**************************************************//
//  GAME
//**************************************************//

model Game {
  id            String        @id @default(nanoid())
  gameMembers   GameMember[]
  message       String?       @default("Join this game to play against me !")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isDeleted     Boolean       @default(false)
  targetUserId  String?
}

model GameMember {
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([gameId, userId])
}

model GameStat {
  id            String   @default(nanoid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  opponentId    String
  createdAt     DateTime @default(now())
  isWinner      Boolean
  userScore     String
  opponentScore String
  isFakeData    Boolean @default(false)

  @@id([id, userId])
}

model GameMatchmakingMember {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @id
  createdAt DateTime @default(now())
}

//**************************************************//
//  ENUM
//**************************************************//

enum EUserLanguage {
  Default
  Fr
  En
}

enum EUserPresenceStatus {
  Default
  NotDisturb
  Invisible
}

enum EUserRelationType {
  WaitingAccept
  PendingAccept
  Friend
  Blocked
  Terminated
}

enum EChannelType {
  Public
  Protected
  Private
}

enum EChannelMemberType {
  Default
  Admin
  Owner
  Banned
  Invited
}
